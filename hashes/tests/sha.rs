use hashes::Sha256;

#[test]
fn rfc_vector0() {
    let mut s = Sha256::new();
    s.update(b"");
    let expected = [
        0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99,
        0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95,
        0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55, 
    ];
    assert_eq!(s.finalize(), expected);
}

#[test]
fn rfc_vector1() {
    let input = b"abc";
    let expected = [
        0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea, 0x41, 0x41, 0x40, 0xde, 0x5d, 0xae,
        0x22, 0x23, 0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c, 0xb4, 0x10, 0xff, 0x61,
        0xf2, 0x00, 0x15, 0xad,
    ];

    let mut sha = Sha256::new();

    sha.update(input.as_ref());

    let digest = sha.finalize();

    assert_eq!(digest, expected);
}

#[test]
fn rfc_vector2() {
    let input = b"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
    let expected = [
        0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e,
        0x60, 0x39, 0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 0xf6, 0xec, 0xed, 0xd4,
        0x19, 0xdb, 0x06, 0xc1,
    ];

    let mut sha = Sha256::new();

    sha.update(input.as_ref());

    let digest = sha.finalize();

    assert_eq!(digest, expected);
}

#[test]
fn rfc_vector3() {
    let input = b"a";
    let expected = [
        0xcd, 0xc7, 0x6e, 0x5c, 0x99, 0x14, 0xfb, 0x92, 0x81, 0xa1, 0xc7, 0xe2, 0x84, 0xd7,
        0x3e, 0x67, 0xf1, 0x80, 0x9a, 0x48, 0xa4, 0x97, 0x20, 0x0e, 0x04, 0x6d, 0x39, 0xcc,
        0xc7, 0x11, 0x2c, 0xd0,
    ];

    let mut sha = Sha256::new();

    for _i in 0..1_000_000 {
        sha.update(input.as_ref());
    }

    let digest = sha.finalize();

    assert_eq!(digest, expected);
}

#[test]
fn rfc_vector4() {
    let input = b"0123456701234567012345670123456701234567012345670123456701234567";
    let expected = [
        0x59, 0x48, 0x47, 0x32, 0x84, 0x51, 0xbd, 0xfa, 0x85, 0x05, 0x62, 0x25, 0x46, 0x2c,
        0xc1, 0xd8, 0x67, 0xd8, 0x77, 0xfb, 0x38, 0x8d, 0xf0, 0xce, 0x35, 0xf2, 0x5a, 0xb5,
        0x56, 0x2b, 0xfb, 0xb5,
    ];

    let mut sha = Sha256::new();

    for _i in 0..10 {
        sha.update(input.as_ref());
    }

    let digest = sha.finalize();

    assert_eq!(digest, expected);
}

#[test]
fn rfc_vector5() {
    let input = b"\x19";
    let expected = [
        0x68, 0xaa, 0x2e, 0x2e, 0xe5, 0xdf, 0xf9, 0x6e, 0x33, 0x55, 0xe6, 0xc7, 0xee, 0x37,
        0x3e, 0x3d, 0x6a, 0x4e, 0x17, 0xf7, 0x5f, 0x95, 0x18, 0xd8, 0x43, 0x70, 0x9c, 0x0c,
        0x9b, 0xc3, 0xe3, 0xd4,
    ];

    let mut sha = Sha256::new();

    sha.update(input.as_ref());

    let digest = sha.finalize();

    assert_eq!(digest, expected);
}

#[test]
fn rfc_vector6() {
    let input = b"\xe3\xd7\x25\x70\xdc\xdd\x78\x7c\xe3\x88\x7a\xb2\xcd\x68\x46\x52";
    let expected = [
        0x17, 0x5e, 0xe6, 0x9b, 0x02, 0xba, 0x9b, 0x58, 0xe2, 0xb0, 0xa5, 0xfd, 0x13, 0x81,
        0x9c, 0xea, 0x57, 0x3f, 0x39, 0x40, 0xa9, 0x4f, 0x82, 0x51, 0x28, 0xcf, 0x42, 0x09,
        0xbe, 0xab, 0xb4, 0xe8,
    ];

    let mut sha = Sha256::new();

    sha.update(input.as_ref());

    let digest = sha.finalize();

    assert_eq!(digest, expected);
}

#[test]
fn rfc_vector7() {
    let input = [
        0x83, 0x26, 0x75, 0x4e, 0x22, 0x77, 0x37, 0x2f, 0x4f, 0xc1, 0x2b, 0x20, 0x52, 0x7a,
        0xfe, 0xf0, 0x4d, 0x8a, 0x05, 0x69, 0x71, 0xb1, 0x1a, 0xd5, 0x71, 0x23, 0xa7, 0xc1,
        0x37, 0x76, 0x00, 0x00, 0xd7, 0xbe, 0xf6, 0xf3, 0xc1, 0xf7, 0xa9, 0x08, 0x3a, 0xa3,
        0x9d, 0x81, 0x0d, 0xb3, 0x10, 0x77, 0x7d, 0xab, 0x8b, 0x1e, 0x7f, 0x02, 0xb8, 0x4a,
        0x26, 0xc7, 0x73, 0x32, 0x5f, 0x8b, 0x23, 0x74, 0xde, 0x7a, 0x4b, 0x5a, 0x58, 0xcb,
        0x5c, 0x5c, 0xf3, 0x5b, 0xce, 0xe6, 0xfb, 0x94, 0x6e, 0x5b, 0xd6, 0x94, 0xfa, 0x59,
        0x3a, 0x8b, 0xeb, 0x3f, 0x9d, 0x65, 0x92, 0xec, 0xed, 0xaa, 0x66, 0xca, 0x82, 0xa2,
        0x9d, 0x0c, 0x51, 0xbc, 0xf9, 0x33, 0x62, 0x30, 0xe5, 0xd7, 0x84, 0xe4, 0xc0, 0xa4,
        0x3f, 0x8d, 0x79, 0xa3, 0x0a, 0x16, 0x5c, 0xba, 0xbe, 0x45, 0x2b, 0x77, 0x4b, 0x9c,
        0x71, 0x09, 0xa9, 0x7d, 0x13, 0x8f, 0x12, 0x92, 0x28, 0x96, 0x6f, 0x6c, 0x0a, 0xdc,
        0x10, 0x6a, 0xad, 0x5a, 0x9f, 0xdd, 0x30, 0x82, 0x57, 0x69, 0xb2, 0xc6, 0x71, 0xaf,
        0x67, 0x59, 0xdf, 0x28, 0xeb, 0x39, 0x3d, 0x54, 0xd6,
    ];
    let expected = [
        0x97, 0xdb, 0xca, 0x7d, 0xf4, 0x6d, 0x62, 0xc8, 0xa4, 0x22, 0xc9, 0x41, 0xdd, 0x7e,
        0x83, 0x5b, 0x8a, 0xd3, 0x36, 0x17, 0x63, 0xf7, 0xe9, 0xb2, 0xd9, 0x5f, 0x4f, 0x0d,
        0xa6, 0xe1, 0xcc, 0xbc,
    ];

    let mut sha = Sha256::new();

    sha.update(input.as_ref());

    let digest = sha.finalize();

    assert_eq!(digest, expected);
}

